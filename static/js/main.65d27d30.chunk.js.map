{"version":3,"sources":["logos/agency-black.png","logos/coc-transparent.png","logos/agency-white.png","themes/default.js","components/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","defaultTheme","createMuiTheme","palette","primary","main","secondary","light","dark","background","default","contrastThreshold","tonalOffset","useStyles","makeStyles","theme","collaboration","marginRight","spacing","logo","height","title","fontWeight","fontSize","left","flex","textAlign","center","right","AppHeader","classes","AppBar","position","color","className","root","Toolbar","IconButton","edge","aria-label","src","alt","Typography","varient","_","paddingTop","verticalAlign","subtitle","logoContainer","width","animatedLogo","marginLeft","maxWidth","display","animatedIcon","top","cocLogo","App","ThemeProvider","CssBaseline","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,kLC0B5BC,EAxBMC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTC,MAAO,UACPF,KAAM,UACNG,KAAM,WAGRC,WAAY,CACVC,QAAS,WAIXC,kBAAmB,EAInBC,YAAa,M,qICRXC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,cAAe,CACbC,YAAaF,EAAMG,QAAQ,IAE7BC,KAAM,CACJC,OAAQ,OAEVC,MAAO,CACLC,WAAY,OACZC,SAAU,SAEZC,KAAM,CACJC,KAAM,EACNC,UAAW,QAEbC,OAAQ,CACNF,KAAM,EACNC,UAAW,UAEbE,MAAO,CACLH,KAAM,EACNC,UAAW,aAgCAG,MA5Bf,WACE,IAAMC,EAAUjB,IAEhB,OACA,kBAACkB,EAAA,EAAD,CAAQC,SAAU,SAAUC,MAAO,UAAWC,UAAWJ,EAAQK,MAC/D,kBAACC,EAAA,EAAD,KACE,yBAAKF,UAAWJ,EAAQN,MACtB,kBAACa,EAAA,EAAD,CAAYC,KAAK,QAAQJ,UAAWJ,EAAQd,cAAeiB,MAAM,UAAUM,aAAW,QACpF,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,yBAAKC,IAAKrB,IAAMe,UAAWJ,EAAQX,KAAMsB,IAAI,WAIjD,yBAAKP,UAAWJ,EAAQH,QACtB,kBAACe,EAAA,EAAD,CAAYC,QAAS,KAAMT,UAAWJ,EAAQT,OAA9C,qBAIF,yBAAKa,UAAWJ,EAAQF,W,yBC5CxBf,EAAYC,aAAW,SAAA8B,GAAC,MAAK,CACjCT,KAAM,CACJU,WAAY,MACZC,cAAe,UAEjBzB,MAAO,CACLY,MAAOlB,EAAMZ,QAAQC,QAAQC,MAE/B0C,SAAU,CACRd,MAAOlB,EAAMZ,QAAQC,QAAQG,OAE/ByC,cAAe,CACbC,MAAO,QAGTC,aAAc,CACZlB,SAAU,WACVmB,WAAY,OACZlC,YAAa,OACbgC,MAAO,MACPG,SAAU,UAEZjC,KAAM,CACJkC,QAAS,QACTJ,MAAO,OACP7B,OAAQ,QAEVkC,aAAc,CACZtB,SAAU,WACVJ,MAAO,MACP2B,IAAK,MACLtB,MAAOlB,EAAMZ,QAAQG,UAAUD,MAEjCmD,QAAS,CACPX,WAAY,MACZO,SAAU,cAkCCK,MA9Bf,WACE,IAAM3B,EAAUjB,IAEhB,OACE,yBAAKqB,UAAU,OACb,kBAACwB,EAAA,EAAD,CAAe3C,MAAOA,GACpB,kBAAC4C,EAAA,EAAD,MACA,kBAAC,EAAD,MAEA,yBAAKzB,UAAWJ,EAAQK,MACtB,uBAAGyB,GAAG,QAAQ1B,UAAWJ,EAAQT,OAAjC,iCACgC,6BADhC,2BAIA,uBAAGuC,GAAG,WAAW1B,UAAWJ,EAAQiB,UAApC,gBAGA,yBAAKb,UAAWJ,EAAQkB,eACtB,yBAAKd,UAAWJ,EAAQoB,cACtB,yBAAKV,IAAKrB,IAAMe,UAAWJ,EAAQX,KAAMsB,IAAI,SAC7C,kBAAC,IAAD,CAAqBmB,GAAG,QAAQ1B,UAAWJ,EAAQwB,iBAGvD,yBAAKd,IAAKgB,IAAStB,UAAWJ,EAAQ0B,QAASf,IAAI,aChEzCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.65d27d30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/agency-black.b398d286.png\";","module.exports = __webpack_public_path__ + \"static/media/coc-transparent.15024af3.png\";","module.exports = __webpack_public_path__ + \"static/media/agency-white.03a4d089.png\";","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#333333',\n    },\n    secondary: {\n      light: '#ff300a',\n      main: '#ed7e79',\n      dark: '#ac1a00',\n      // contrastText: '#ffcc00',\n    },\n    background: {\n      default: \"#fffdfe\",\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n\nexport default defaultTheme;","import React from 'react';\n\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n} from '@material-ui/core';\nimport {makeStyles } from '@material-ui/core/styles';\n\nimport logo from \"logos/agency-white.png\";\n\nconst useStyles = makeStyles(theme => ({\n  collaboration: {\n    marginRight: theme.spacing(1),\n  },\n  logo: {\n    height: '1em',\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: '1.5em',\n  },\n  left: {\n    flex: 1,\n    textAlign: 'left',\n  },\n  center: {\n    flex: 2,\n    textAlign: 'center',\n  },\n  right: {\n    flex: 1,\n    textAlign: 'right',\n  }\n}));\n\nfunction AppHeader() {\n  const classes = useStyles();\n\n  return (\n  <AppBar position={\"static\"} color={\"primary\"} className={classes.root}>\n    <Toolbar>\n      <div className={classes.left}>\n        <IconButton edge=\"start\" className={classes.collaboration} color=\"inherit\" aria-label=\"menu\">\n          <FavoriteIcon/>\n          <ClearIcon/>\n          <img src={logo} className={classes.logo} alt=\"logo\"/>\n        </IconButton>\n      </div>\n\n      <div className={classes.center}>\n        <Typography varient={\"h3\"} className={classes.title}>\n          The Love Machine\n        </Typography>\n      </div>\n      <div className={classes.right}>\n        {/*Empty Flex Space*/}\n      </div>\n\n    </Toolbar>\n  </AppBar>\n  );\n}\n\nexport default AppHeader;","import React from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from \"themes/default\";\n\nimport logo from 'logos/agency-black.png';\nimport cocLogo from 'logos/coc-transparent.png';\nimport './App.css';\nimport AppHeader from \"./components/AppHeader\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport FavoriteTwoToneIcon from '@material-ui/icons/FavoriteTwoTone';\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\n\nconst useStyles = makeStyles(_ => ({\n  root: {\n    paddingTop: '1em',\n    verticalAlign: 'middle',\n  },\n  title: {\n    color: theme.palette.primary.main,\n  },\n  subtitle: {\n    color: theme.palette.primary.light,\n  },\n  logoContainer: {\n    width: '100%',\n    // position: 'relative',\n  },\n  animatedLogo: {\n    position: 'relative',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    width: '50%',\n    maxWidth: '40vmin',\n  },\n  logo: {\n    display: 'block',\n    width: '100%',\n    height: 'auto',\n  },\n  animatedIcon: {\n    position: 'absolute',\n    right: '25%',\n    top: '25%',\n    color: theme.palette.secondary.main,\n  },\n  cocLogo: {\n    paddingTop: '1em',\n    maxWidth: '40vmin',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppHeader/>\n\n        <div className={classes.root}>\n          <p id=\"title\" className={classes.title}>\n            The Love Machine (Learning) 2:<br/>\n            Valentine's Day Edition\n          </p>\n          <p id=\"subtitle\" className={classes.subtitle}>\n            Presented By\n          </p>\n          <div className={classes.logoContainer}>\n            <div className={classes.animatedLogo}>\n              <img src={logo} className={classes.logo} alt=\"logo\" />\n              <FavoriteTwoToneIcon id=\"heart\" className={classes.animatedIcon} />\n            </div>\n          </div>\n          <img src={cocLogo} className={classes.cocLogo} alt=\"logo\" />\n        </div>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}